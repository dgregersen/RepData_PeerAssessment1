We also provide a few summary stats of the data.
```{r}
library(scales)
library(ggplot2)
if(!exists("activity")) {
activity <- read.csv(unzip("activity.zip"), header = TRUE)
}
head(activity)
dim(activity)
sum(is.na(activity))
```
## What is mean total number of steps taken per day?
First we calculate the total number og steps taken for each day in the entire
dataset and reformat the dataset a little.
```{r stepcount, results = "hide"}
stepsPerDay <- as.data.frame.table(tapply(activity$steps, activity$date, sum))
names(stepsPerDay) <- c('date', 'steps')
stepsPerDay$date <- as.Date(stepsPerDay$date)
```
We then plot the data using ggplot.
```{r}
ggplot(data = stepsPerDay, aes(steps)) +
geom_histogram() +
xlab("Steps") + ylab("Frequency") + ggtitle("Distribution of Daily Steps")
```
We then report the median and average daily step count.
```{r}
```
## What is the average daily activity pattern?
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
---
title: "reporducible_research_peer_assesment_1"
output: "PA1_template.Rmd"
html_document:
keep_md: true
---
## Instructions
This scripts assumes that you have changes your working directory to the
location of the cloned GitHub repo.
## Loading and preprocessing the data
The following loads the activity data and loads necessary libraries.
We also provide a few summary stats of the data.
```{r}
library(scales)
library(ggplot2)
if(!exists("activity")) {
activity <- read.csv(unzip("activity.zip"), header = TRUE)
}
head(activity)
dim(activity)
sum(is.na(activity))
```
## What is mean total number of steps taken per day?
First we calculate the total number og steps taken for each day in the entire
dataset and reformat the dataset a little.
```{r stepcount, results = "hide"}
stepsPerDay <- as.data.frame.table(tapply(activity$steps, activity$date, sum))
names(stepsPerDay) <- c('date', 'steps')
stepsPerDay$date <- as.Date(stepsPerDay$date)
```
We then plot the data using ggplot.
```{r}
ggplot(data = stepsPerDay, aes(steps)) +
geom_histogram() +
xlab("Steps") + ylab("Frequency") + ggtitle("Distribution of Daily Steps")
```
We then report the median and average daily step count.
```{r}
```
## What is the average daily activity pattern?
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
---
title: "reporducible_research_peer_assesment_1"
keep_md: true
---
## Instructions
This scripts assumes that you have changes your working directory to the
location of the cloned GitHub repo.
## Loading and preprocessing the data
The following loads the activity data and loads necessary libraries.
We also provide a few summary stats of the data.
```{r}
library(scales)
library(ggplot2)
if(!exists("activity")) {
activity <- read.csv(unzip("activity.zip"), header = TRUE)
}
head(activity)
dim(activity)
sum(is.na(activity))
```
## What is mean total number of steps taken per day?
First we calculate the total number og steps taken for each day in the entire
dataset and reformat the dataset a little.
```{r stepcount, results = "hide"}
stepsPerDay <- as.data.frame.table(tapply(activity$steps, activity$date, sum))
names(stepsPerDay) <- c('date', 'steps')
stepsPerDay$date <- as.Date(stepsPerDay$date)
```
We then plot the data using ggplot.
```{r}
ggplot(data = stepsPerDay, aes(steps)) +
geom_histogram() +
xlab("Steps") + ylab("Frequency") + ggtitle("Distribution of Daily Steps")
```
We then report the median and average daily step count.
```{r}
```
## What is the average daily activity pattern?
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
---
title: "reporducible_research_peer_assesment_1"
keep_md: true
---
## Instructions
This scripts assumes that you have changes your working directory to the
location of the cloned GitHub repo.
## Loading and preprocessing the data
The following loads the activity data and loads necessary libraries.
We also provide a few summary stats of the data.
```{r}
library(scales)
library(ggplot2)
if(!exists("activity")) {
activity <- read.csv(unzip("activity.zip"), header = TRUE)
}
head(activity)
dim(activity)
sum(is.na(activity))
```
## What is mean total number of steps taken per day?
First we calculate the total number og steps taken for each day in the entire
dataset and reformat the dataset a little.
```{r stepcount, results = "hide"}
stepsPerDay <- as.data.frame.table(tapply(activity$steps, activity$date, sum))
names(stepsPerDay) <- c('date', 'steps')
stepsPerDay$date <- as.Date(stepsPerDay$date)
```
We then plot the data using ggplot.
```{r}
ggplot(data = stepsPerDay, aes(steps)) +
geom_histogram() +
xlab("Steps") + ylab("Frequency") + ggtitle("Distribution of Daily Steps")
```
We then report the median and average daily step count.
```{r}
```
## What is the average daily activity pattern?
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
---
title: "reporducible_research_peer_assesment_1"
keep_md: true
---
## Instructions
This scripts assumes that you have changes your working directory to the
location of the cloned GitHub repo.
## Loading and preprocessing the data
The following loads the activity data and loads necessary libraries.
We also provide a few summary stats of the data.
```{r}
library(scales)
library(ggplot2)
if(!exists("activity")) {
activity <- read.csv(unzip("activity.zip"), header = TRUE)
}
head(activity)
dim(activity)
sum(is.na(activity))
```
## What is mean total number of steps taken per day?
First we calculate the total number og steps taken for each day in the entire
dataset and reformat the dataset a little.
```{r stepcount, results = "hide"}
stepsPerDay <- as.data.frame.table(tapply(activity$steps, activity$date, sum))
names(stepsPerDay) <- c('date', 'steps')
stepsPerDay$date <- as.Date(stepsPerDay$date)
```
We then plot the data using ggplot.
```{r}
ggplot(data = stepsPerDay, aes(steps)) +
geom_histogram() +
xlab("Steps") + ylab("Frequency") + ggtitle("Distribution of Daily Steps")
```
We then report the median and average daily step count.
```{r}
```
## What is the average daily activity pattern?
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
---
title: "reporducible_research_peer_assesment_1"
---
## Instructions
This scripts assumes that you have changes your working directory to the
location of the cloned GitHub repo.
## Loading and preprocessing the data
The following loads the activity data and loads necessary libraries.
We also provide a few summary stats of the data.
```{r}
library(scales)
library(ggplot2)
if(!exists("activity")) {
activity <- read.csv(unzip("activity.zip"), header = TRUE)
}
head(activity)
dim(activity)
sum(is.na(activity))
```
## What is mean total number of steps taken per day?
First we calculate the total number og steps taken for each day in the entire
dataset and reformat the dataset a little.
```{r stepcount, results = "hide"}
stepsPerDay <- as.data.frame.table(tapply(activity$steps, activity$date, sum))
names(stepsPerDay) <- c('date', 'steps')
stepsPerDay$date <- as.Date(stepsPerDay$date)
```
We then plot the data using ggplot.
```{r}
ggplot(data = stepsPerDay, aes(steps)) +
geom_histogram() +
xlab("Steps") + ylab("Frequency") + ggtitle("Distribution of Daily Steps")
```
We then report the median and average daily step count.
```{r}
```
## What is the average daily activity pattern?
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
---
title: "reporducible_research_peer_assesment_1"
---
## Instructions
This scripts assumes that you have changes your working directory to the
location of the cloned GitHub repo.
## Loading and preprocessing the data
The following loads the activity data and loads necessary libraries.
We also provide a few summary stats of the data.
```{r}
library(scales)
library(ggplot2)
if(!exists("activity")) {
activity <- read.csv(unzip("activity.zip"), header = TRUE)
}
head(activity)
dim(activity)
sum(is.na(activity))
```
## What is mean total number of steps taken per day?
First we calculate the total number og steps taken for each day in the entire
dataset and reformat the dataset a little.
```{r stepcount, results = "hide"}
stepsPerDay <- as.data.frame.table(tapply(activity$steps, activity$date, sum))
names(stepsPerDay) <- c('date', 'steps')
stepsPerDay$date <- as.Date(stepsPerDay$date)
```
We then plot the data using ggplot.
```{r}
ggplot(data = stepsPerDay, aes(steps)) +
geom_histogram() +
xlab("Steps") + ylab("Frequency") + ggtitle("Distribution of Daily Steps")
```
We then report the median and average daily step count.
```{r}
```
## What is the average daily activity pattern?
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
?tapply
dailyPattern <- as.data.frame.table(
tapply(activity$steps, list(activity$date, activity$interval),
mean, na.rm = TRUE))
head(dailyPattern)
dailyPattern <- as.data.frame.table(
tapply(activity$steps, activity$interval,
mean, na.rm = TRUE))
head(dailyPattern)
names(dailyPattern) <- c('interval','avg_steps')
head(dailyPattern)
?ggploy
?ggploy
?ggplot
?as.Date
?format
?strptime
ggplot(data = dailyPattern, aes(x = factor(interval), y = steps)
ggplot(data = dailyPattern, aes(x = factor(interval), y = steps)) +
geom_line()
ggplot(data = dailyPattern, aes(x = factor(interval), y = avg_steps)) +
geom_line()
ggplot(data = dailyPattern, aes(x = factor(interval))) +
geom_line()
ggplot(data = dailyPattern, aes(x = factor(interval), y = avg_steps)) +
geom_line()
ggplot(data = dailyPattern, aes(x = factor(interval), y = avg_steps)) +
geom_line() + geom_path()
ggplot(data = dailyPattern, aes(x = factor(interval), y = avg_steps)) +
geom_path()
unique(activity$date)
unique(activity$interval)
strptime(unique(activity$interval), format = "%H")
dailyPattern <- as.data.frame.table(
tapply(activity$steps, activity$interval, activity$date,
mean, na.rm = TRUE))
dailyPattern <- as.data.frame.table(
tapply(activity$steps, list(activity$interval, activity$date),
mean, na.rm = TRUE))
head(dailyPattern)
dailyPattern <- as.data.frame.table(
tapply(activity$steps, list(activity$interval, activity$date),
mean, na.rm = TRUE))
names(dailyPattern) <- c('interval','avg_steps','date')
head(dailyPattern)
str(dailyPattern)
names(dailyPattern) <- c('interval','date','avg_steps')
str(dailyPattern)
dailyPattern
?strptime
strptime(2335, format = "%H")
strptime(2335, format = "%M")
dailyPattern$interval <- if(dailyPattern < 10) {
paste0(000, dailyPattern$interval)
else if (dailyPattern < 100) {
dailyPattern$interval <- if(dailyPattern < 10) {
paste(000, dailyPattern$interval)
} else if (dailyPattern < 100) {
paste(00, dailyPattern$interval)
} else (dailyPattern < 1000) {
dailyPattern$interval <- if(dailyPattern < 10) {
paste(000, dailyPattern$interval)
} else if (dailyPattern < 100) {
paste(00, dailyPattern$interval)
} else (dailyPattern < 1000) {
paste(000, dailyPattern$interval)
} else if (dailyPattern < 100) {
dailyPattern$interval <- if(dailyPattern$interval < 10) {
paste0(000, dailyPattern$interval)
} else if (dailyPattern < 100) {
paste0(00, dailyPattern$interval)
} else (dailyPattern < 1000) {
str(dailyPattern)
dailyPattern$interval <- if(dailyPattern$interval < 10) {
paste0('000', dailyPattern$interval)
} else if (dailyPattern < 100) {
paste0('00', dailyPattern$interval)
} else (dailyPattern < 1000) {
dailyPattern$interval <- if(dailyPattern$interval < 10) {
paste(000, dailyPattern$interval)
} else if (dailyPattern < 100) {
paste(00, dailyPattern$interval)
} else (dailyPattern < 1000) {
dailyPattern <- as.data.frame.table(
tapply(activity$steps, list(activity$interval, activity$date),
mean, na.rm = TRUE))
names(dailyPattern) <- c('interval','date','avg_steps')
dailyPattern$interval <- if(dailyPattern$interval < 10) {
paste(000, dailyPattern$interval)
} else if (dailyPattern < 100) {
paste(00, dailyPattern$interval)
} else (dailyPattern < 1000) {
dailyPattern <- as.data.frame.table(
tapply(activity$steps, list(activity$interval, activity$date),
mean, na.rm = TRUE))
names(dailyPattern) <- c('interval','date','avg_steps')
dailyPattern$interval <- if(dailyPattern$interval < 10) {
paste(000, dailyPattern$interval)
} else if (dailyPattern < 100) {
paste(00, dailyPattern$interval)
} else if (dailyPattern < 1000) {
paste(0, dailyPattern$interval)
}
head(dailyPattern)
dailyPattern <- as.data.frame.table(
tapply(activity$steps, list(activity$interval, activity$date),
mean, na.rm = TRUE))
names(dailyPattern) <- c('interval','date','avg_steps')
dailyPattern$interval <- if(dailyPattern$interval < 10) {
paste(000, dailyPattern$interval)
} else if (dailyPattern < 100) {
paste(00, dailyPattern$interval)
} else if (dailyPattern < 1000) {
paste(0, dailyPattern$interval)
}
dailyPattern <- as.data.frame.table(
tapply(activity$steps, list(activity$interval, activity$date),
mean, na.rm = TRUE))
names(dailyPattern) <- c('interval','date','avg_steps')
dailyPattern$interval <- if(dailyPattern$interval < '10') {
paste('000', dailyPattern$interval)
} else if (dailyPattern < '100') {
paste('00', dailyPattern$interval)
} else if (dailyPattern < '1000') {
paste('0', dailyPattern$interval)
}
dailyPattern <- as.data.frame.table(
tapply(activity$steps, list(activity$interval, activity$date),
mean, na.rm = TRUE))
names(dailyPattern) <- c('interval','date','avg_steps')
dailyPattern$interval <- if(dailyPattern$interval < 10) {
paste('000', dailyPattern$interval)
} else if (dailyPattern$interval < '100') {
paste('00', dailyPattern$interval)
} else if (dailyPattern < '1000') {
paste('0', dailyPattern$interval)
}
dailyPattern$interval <- if(dailyPattern$interval == '0') {'0000'}
---
title: "Reporducible Research Peer Assesment 1"
---
## Instructions
This scripts assumes that you have changes your working directory to the
location of the cloned GitHub repo.
## Loading and preprocessing the data
The following loads the activity data and loads necessary libraries.
We also provide a few summary stats of the data.
```{r}
library(scales)
library(ggplot2)
if(!exists("activity")) {
activity <- read.csv(unzip("activity.zip"), header = TRUE)
}
head(activity)
dim(activity)
sum(is.na(activity))
```
## What is mean total number of steps taken per day?
First we calculate the total number og steps taken for each day in the entire
dataset and reformat the dataset a little.
```{r, results = "hide"}
stepsPerDay <- as.data.frame.table(
tapply(activity$steps, activity$date, sum, na.rm = TRUE))
names(stepsPerDay) <- c('date', 'steps')
stepsPerDay$date <- as.Date(stepsPerDay$date)
```
We then plot the data using ggplot.
```{r}
ggplot(data = stepsPerDay, aes(steps)) +
geom_histogram() +
xlab("Steps") + ylab("Frequency") + ggtitle("Distribution of Daily Steps")
```
We then report the median and average daily step count.
```{r}
median(stepsPerDay$steps, na.rm = TRUE)
mean(stepsPerDay$steps, na.rm = TRUE)
```
## What is the average daily activity pattern?
Below we are summarising the step count by interval.
```{r, results = 'hide'}
dailyPattern <- as.data.frame.table(
tapply(activity$steps, list(activity$interval, activity$date),
mean, na.rm = TRUE))
names(dailyPattern) <- c('interval','date','avg_steps')
```
We then plot the timeseries graph.
```{r}
ggplot(data = dailyPattern, aes(interval, avg_steps)) +
geom_path()
```
dailyPattern <- aggregate(steps ~ interval, data = activity, mean, na.rm = TRUE)
head(dailyPattern)
plot(steps ~ interval, data = dailyPattern, type = 'l')
ggplot(steps ~ interval, data = dailyPattern, type = 'l')
plot(steps ~ interval, data = dailyPattern, type = 'l')
??ggplot
?ggplot
ggplot(data = dailyPattern, aes(steps, interval)) + geom_line()
ggplot(data = dailyPattern, aes(y = steps, x = interval)) + geom_line()
dailyPattern <- aggregate(steps ~ interval, data = activity, mean, na.rm = TRUE)
dailyPattern <- aggregate(steps ~ interval, data = activity, mean, na.rm = TRUE)
plot(steps ~ interval, data = dailyPattern, type = 'l')
ggplot(data = dailyPattern, aes(y = steps, x = interval)) + geom_line()
plot(steps ~ interval, data = dailyPattern, type = 'l')
ggplot(data = dailyPattern, aes(y = steps, x = interval)) + geom_line()
ggplot(data = dailyPattern, aes(y = steps, x = interval)) +
geom_line() +
xlab("Minute Interval") + ylab("Steps") +
ggtitle("Daily Pattern of Step Count")
ggplot(data = dailyPattern, aes(y = steps, x = interval, color = "blue")) +
geom_line() +
xlab("Minute Interval") + ylab("Steps") +
ggtitle("Daily Pattern of Step Count")
ggplot(data = dailyPattern, aes(y = steps, x = interval, color = "1")) +
geom_line() +
xlab("Minute Interval") + ylab("Steps") +
ggtitle("Daily Pattern of Step Count")
ggplot(data = dailyPattern, aes(y = steps, x = interval, col("blue"))) +
geom_line() +
xlab("Minute Interval") + ylab("Steps") +
ggtitle("Daily Pattern of Step Count")
ggplot(data = dailyPattern, aes(y = steps, x = interval, col("red"))) +
geom_line() +
xlab("Minute Interval") + ylab("Steps") +
ggtitle("Daily Pattern of Step Count")
ggplot(data = dailyPattern, aes(y = steps, x = interval, color("red"))) +
geom_line() +
xlab("Minute Interval") + ylab("Steps") +
ggtitle("Daily Pattern of Step Count")
ggplot(data = dailyPattern, aes(y = steps, x = interval)) +
geom_line(colour = "blue") +
xlab("Minute Interval") + ylab("Steps") +
ggtitle("Daily Pattern of Step Count")
max(dailyPattern$steps)
?order
order(dailyPattern, dailyPattern$steps)
order(dailyPattern)
sort()
?sort
?order
dailyPattern[dailyPattern$steps == max(dailyPattern$steps),]
